name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git ninja-build libssl-dev pkg-config

    - name: Cache liboqs
      id: cache-liboqs
      uses: actions/cache@v4
      with:
        path: |
          /usr/local/lib/liboqs*
          /usr/local/include/oqs
          /usr/local/lib64/liboqs*
        key: liboqs-optimized-${{ runner.os }}-${{ hashFiles('scripts/build_liboqs.sh') }}
        restore-keys: |
          liboqs-optimized-${{ runner.os }}-
          liboqs-${{ runner.os }}-

    - name: Build liboqs (if not cached)
      # OPTIMIZED: Only builds ML-KEM-768 and ML-DSA-65 for faster CI builds
      if: steps.cache-liboqs.outputs.cache-hit != 'true'
      run: |
        chmod +x ./scripts/build_liboqs.sh
        ./scripts/build_liboqs.sh

    - name: Upload liboqs artifacts
      # Share built liboqs with build-c job to avoid duplicate builds
      # Upload immediately after build, regardless of test results
      if: always() && steps.cache-liboqs.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: liboqs-built
        path: |
          /usr/local/lib/liboqs*
          /usr/local/include/oqs
          /usr/local/lib64/liboqs*
        retention-days: 1

    - name: Upload liboqs artifacts (from cache)
      # Also upload cached liboqs for consistency
      if: always() && steps.cache-liboqs.outputs.cache-hit == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: liboqs-built
        path: |
          /usr/local/lib/liboqs*
          /usr/local/include/oqs
          /usr/local/lib64/liboqs*
        retention-days: 1

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --cache-dir ~/.cache/pip -r requirements.txt
        pip install --cache-dir ~/.cache/pip -e .

    - name: Run tests
      id: run-tests
      continue-on-error: true
      run: |
        pytest tests/ -v --tb=short

    - name: Run linting
      id: run-linting
      continue-on-error: true
      run: |
        ruff check src/ tests/
        ruff format --check src/ tests/

    - name: Run type checking
      id: run-type-checking
      continue-on-error: true
      run: |
        mypy src/ tests/

    - name: Check test results
      run: |
        echo "Checking results of all quality checks..."
        if [ "${{ steps.run-tests.outputs.exit-code }}" != "0" ] || [ "${{ steps.run-linting.outputs.exit-code }}" != "0" ] || [ "${{ steps.run-type-checking.outputs.exit-code }}" != "0" ]; then
          echo "Some quality checks failed. Job will fail but artifacts were uploaded."
          exit 1
        fi
        echo "All quality checks passed!"

  build-c:
    runs-on: ubuntu-latest
    needs: test
    # OPTIMIZED: Uses liboqs artifacts from test job instead of rebuilding

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git ninja-build libssl-dev pkg-config

    - name: Download liboqs artifacts
      uses: actions/download-artifact@v4
      with:
        name: liboqs-built
        path: /usr/local/

    - name: Verify liboqs installation
      run: |
        echo "Verifying liboqs installation from artifacts..."
        if [ ! -f "/usr/local/lib/liboqs.so" ] && [ ! -f "/usr/local/lib64/liboqs.so" ]; then
          echo "ERROR: liboqs library not found in artifacts!"
          echo "Available files in /usr/local/lib/:"
          ls -la /usr/local/lib/ || echo "Directory not accessible"
          echo "Available files in /usr/local/lib64/:"
          ls -la /usr/local/lib64/ || echo "Directory not accessible"
          exit 1
        fi
        echo "liboqs libraries found successfully"
        ls -la /usr/local/lib/liboqs* /usr/local/lib64/liboqs* 2>/dev/null || echo "No additional liboqs libraries"
        
        if [ ! -d "/usr/local/include/oqs" ]; then
          echo "ERROR: liboqs headers not found in artifacts!"
          echo "Available files in /usr/local/include/:"
          ls -la /usr/local/include/ || echo "Directory not accessible"
          exit 1
        fi
        echo "liboqs headers found successfully"
        ls -la /usr/local/include/oqs/
        
        if command -v ldconfig &> /dev/null; then
          echo "Updating library cache..."
          sudo ldconfig
        fi

    - name: Build C demos
      run: |
        mkdir -p build
        cd build
        cmake ..
        make -j$(nproc)

    - name: Test C demos
      run: |
        cd build
        # Basic smoke tests - these will be enhanced in milestone 2
        echo "Testing C demo compilation success"

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t pqc-lab:test .

    - name: Test Docker image
      run: |
        docker run --rm pqc-lab:test pqc-lab --help
        docker run --rm pqc-lab:test python -c "import pqc_lab; print('Import successful')"

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        pip install safety bandit

    - name: Check for known security vulnerabilities
      run: |
        safety check

    - name: Run security linting
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        echo "Security scan completed"
